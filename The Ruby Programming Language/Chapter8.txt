Глава 8 - Отражение и метапрограммирование.

Отражение, которое также называют интроспекцией, или самоанализом, определяет
способность программы исследовать свое состояние и свою структуру.

В самом простом определении метапрограммирование - это создание программ,
помогающих создавать другие программы. Иначе говоря, метапрограммирование
представляет собой набор технологических приемов, предназначенных для
расширения синтаксиса Ruby с целью облегчения процесса программирования.
-------------------------------------------------------------------------------
Глава 8.1 - Типы, классы и модули.

Найболее часто используются методы отражения, определяющие тип объекта, то есть
экземпляром какого класса он является и на какие методы реагирует.

o.class
  Возвращает класс объекта o

o.superclass
  Возвращает надкласс объекта o

o.instance_of? c
  Определяет, верно ли, что o.class == c

o.is_a? c
  Определяет, является ли o экземпляром класса c или любого из его подклассов

o.kind_of? c
  Является синонимом для is_a?

o === c
  Для любого класса или модуля c определяет, является ли истинным выражение
  o.is_a? c

o.respond_to? name
  Определяет, имеет ли объект o открытый или защищенный метод с указанным
  именем. Если ему в качестве второго аргумента передать true, то проверяет так
  же наличие закрытого метода.
-------------------------------------------------------------------------------
Глава 8.2.2 - Instance_eval и class_eval.

В классе Object определен метод по имени instance_eval, а в классе Module -
метод по имени class_eval (module_eval - это синоним class_eval). Оба этих
метода вычисляют Ruby-код так же, как и метод eval, но с двумя отличиями.

Первое отличие состоит в том, что они вычисляют код в контексте указанного
объекта или модуля - в процессе вычисления кода объект или модуль являются
значением self.

Следует учесть важное различие между instance_eval и class_eval. Метод
instance_eval определяет синглтон-методы объекта (в результате чего при вызове
этого метода в отношении объекта класса получаются методы класса). Метод
class_eval определяет обычные методы экземпляра.

Второе важное отличие этих методов от глобального метода eval состоит в том,
что instance_eval и class_eval могут воспринимать для вычисления блок кода.
-------------------------------------------------------------------------------
Глава 8.5 - Перехватчики.

В классах Module, Class и Object реализован ряд методов обратного вызова, или
перехватчиков. Они не определяются по умолчанию, но если их определить для
модуля, класса или объекта, то они будут вызываться при возникновении
определенных событий. При этом есть возможность расширить поведение Ruby при
создании подклассов на основе классов, при включении модулей или при
определении методов. Имена методов-перехватчиков (за исключением некоторых)
оканчиваются на "ed".

Когда определяется новый класс, Ruby вызывает для надкласса этого нового класса
метод класса inherited, передавая ему в качестве аргумента объект нового
класса. Это позволяет классам наращивать поведение или вводить ограничения для
своих потомков. Так как методы класса наследуются, то метод inherited будет
вызван, если он определен в любом из предков нового класса.

Когда модуль включается в класс или в другой модуль, вызывается метод класса
included включаемого модуля, использующий в качестве аргумента объект класса
или модуля, в который он был включен.

module Final               # Класс, включающий Final, не может иметь подклассов
  def self.included(c)     # При включении в класс с
    c.instance_eval do     # Определение метода класса для с
      def inherited(sub)   # Для определения подклассов
        raise Exception,   # И аварийного завершения с выдачей исключения
          'Попытка создания подкласса'
      end
    end
  end
end

Аналогично если в модуле определен метод класса extended, этот метод будет
вызываться при каждом использовании модуля для расширения объекта.
-------------------------------------------------------------------------------
Глава 8.6 - Трассировка.

В Ruby определен ряд средств для трассировки выполнения программы.

STDERR.puts "#{__FILE__}:#{__LINE__}: неверные данные"

Трассировка стека, возвращаемая Exception.backtrace и Kernel.caller, также
включает именна методов.

Метод __method__ хорошо сочетается с __FILE__ и __LINE__:
raise "Неверное утверждение в #{__method__} из #{__FILE__}:#{__LINE__}"

Метод __method__ возвращает имя, под которым метод был определен первоночально,
даже если метод был вызван через псевдоним.

Вывод сообщений при каждом изменении значения переменной $SAFE:

trace_var(:$SAFE) { |v|
  puts "Значение переменной $SAFE установлено в #{v} из #{caller[1]}"
}

Для прекращения отслеживания переменной есть метод Kernel.untrace_var.
-------------------------------------------------------------------------------
Глава 8.7 - Модули ObjectSpace и GC.

В модуле ObjectSpace определены несколько низкоуравневых методов, которые порой
могут пригодиться для отладки и метапрограммирования. Найболее интересный метод
итератор each_object, который может извлекать любой объект (или любой экземпляр
указанного класса), о которм известно интерпретатору:

# Вывод списка всех известных классов
ObjectSpace.each_object(Class) { |c| puts c }

Метод ObjectSpace._id2ref воспринимает ID объекта и возвращает объект или
выдает ошибку RangeError, если объекта с таким ID нет.
-------------------------------------------------------------------------------
Глава 8.10.1 - Определение методов с помощью class_eval.

Методы ниже по характеру работы похожи на attr_reader и attr_accessor,
приводятся чтобы показать порядок реализации подобных методов.

class Module
  private

  def readonly(*syms)
    return if syms.size == 0
    code = ""
    syms.each do |s|
      code << "def #{s}; @#{s}; end\n"
    end
    class_eval code
  end

  def readwrite(*syms)
    return if syms.size == 0
    code = ""
    syms.each do |s|
      code << "def #{s}; @#{s}; end\n"
      code << "def #{s}=(value); @#{s} = value; end\n"
    end
    class_eval code
  end
end
-------------------------------------------------------------------------------
Глава 8.11 - Выстраивание цепочки псевдонимов.

В Ruby часто используется динамическое изменение методов. Технология называется
alias chaining. Организация:

Сначала создается псевдоним для метода, который будет подвержен изменениям.
Этот псевдоним предоставляет имя для неизменной версии метода.

Затем определяется новая версия метода. Эта новая версия должна вызвать
неизмененную версию метода, используя псевдоним, но перед этим или после этого
в новую версию могут быть добавлены любые необходимые функцинальные
возможности.
-------------------------------------------------------------------------------
Глава 8.11.1 - Отслеживание загрузки файлов и определение новых классов.

# Определяем модуль чтобы сохранить нужное глобальное состояние. Таким образом
# мы не вносим в глобальное пространство имен ничего, кроме самого
# необходимого.
module ClassTrace
  # Этот массив содержит список загруженных файлов и получивших определения
  # новых классов. Каждый элемент является подмассивом, содержащий новый класс,
  # получивший определение, или загруженный файл и фрейм стека, указывающий,
  # где он был определен или загружен.
  T = [ ]

  # Теперь определяем константу OUT для указания, куда направлять выходную
  # информацию с результатами отслеживания. Значение по умолчанию указывает на
  # STDERR, но оно может извлекаться и из аргументов командной строки.
  if x = ARGV.index("--traceout")     # Если аргумент присутсвует
    OUT = File.open(ARGV[x + 1], "w") # Открыть указанный файл
    ARGV[x, 2] = nil                  # Удалить аргументы
  else
    OUT = STDERR                      # Значение по умолчанию
  end
end

# Выстраивание цепочки псевдонимов, определение псевдонимов для исходных
# методов.
alias original_require require
alias original_load    load

# Выстраивание цепочки псевдонимов, определение новых версий методов
def require(file)
  ClassTrace::T << [file.caller[0]] # Что и где было загружено
  original_require(file)            # Вызов исходного метода
end

def load(*args)
  ClassTrace::T << [args[0].caller[0]] # Что и где было загружено
  original_load(*args)                 # Вызов исходного метода
end

# Этот метода-перехватчик вызывается при каждом определении нового класса
def Object.inherited(c)
  ClassTrace::T << [c.caller[0]] # Что и где было определено
end

# Метод Kernel.at_exit регестрирует блок, запускаемый при выходе из программы.
# Используем его для выдачи отчета о собранных сведениях о файлах и классах.
at_exit {
  o = ClassTrace::OUT
  o.puts "=" * 60
  o.puts "Загруженные файлы и определенные классы:"
  o.puts "=" * 60
  ClassTrace::T.each do |what, where|
    if what.is_a? Class
      o.puts "Определен: #{what.ancestors.join('<-')} из #{where}"
    else
      o.puts "Загружен: #{what} из #{where}"
    end
  end
}
-------------------------------------------------------------------------------
Глава 8.12 - Предметно-ориентированные языки.

Довольно часто целью метапрограммирования на языке Ruby является создание
предметно-ориентированных языков (DSL). DSL - это простое расширение Ruby
синтаксиса (с применением методов, похожих на ключевые слова) или API,
позволяющий решать задачи или предоставлять данные в более естественном виде,
чем без их применения.
-------------------------------------------------------------------------------
Глава 8.12.1 - Простой вывод XML с помощью метода method_missing.

# Простой DSL для генерации XML-вывода:
class XML
  # При создании экземпляра этого класса указывается поток или объект,
  # содержащий выходную информацию. Это может быть любой объект, отзывающися на
  # << (строка).
  def initialize(out)
    @out = out # Место отправки выходной информации
  end

  # Вывод указанного объекта в виде символьных данных - CDATA, возвращение nil.
  def content(text)
    @out << text.to_s; nil
  end

  # Вывод указанного объекта в виде комментария, возвращение nil.
  def comment(text)
    @out << "<!-- #{text} -->"; nil
  end

  # Вывод тега с указанным именем и аттрибутами. Если есть блок, вызов его для
  # вывода или возвращения содержимого. Возвращение nil.
  def tag(tagname, attributes = {})
    # Вывод имени тега
    @out << "<#{tagname}"

    # Вывод аттрибутов
    attributes.each { |attr, value| @out << " #{attr}='#{value}'" }

    if block_given?
      @out << '>'     # Завершение открытого тега
      content = yield # Вызов блока для вывода или возвращения содержимого

      if content
        @out << content.to_s
      end

      @out << "</#{tagname}" # Закрытие тега
    else
      @out << '/>
    end

    nil
  end

  # Расположенный ниже код превращает все это из обычного класса в DSL.
  # Во-первых: любой неизвестный метод рассматривается как имя тега.
  alias method_missing tag

  # Во-вторых: для нового экземпляра класса запускается блок.
  def self.generate(out, &block)
    XML.new(out).instance_eval(&block)
  end
end

Использовать код выше можно так (выведет XML):

pagetitle = "Проверочная страница для XML.generate"

XML.generate(STDOUT) do
  html do
    head do
      title { pagetitle }
      comment "Это проверка"
    end

    body do
      h1(style: "font-family:sans-serif") { pagetitle }
      ul(type: "square") do
        li { Time.now }
        li { RUBY_VERSION }
      end
    end
  end
end
-------------------------------------------------------------------------------
Глава 8.12.2 - Проверяемый вывод XML-кода с помощью генерации метода.

Привер выше лишен проверок на отсутсвие ошибок, гарантирующих, что выходная
информация соответствует любой конкретной грамматике XML. Далее мы добавим
несколько простых проверок на отсутствие ошибок. Тут будет два DSL. Первый -
это DSL для определения грамматики XML, второй - используется для генерации
XML-выхода, соответствующего определенным правилам.

class HTMLForm < XMLGrammar
  element :form,
    action:   REQ,
    method:  'GET',
    enctype: 'application/x-www-form-urlencoded',
    name:    OPT

  element :input,
    type:      'text',
    name:      OPT,
    value:     OPT,
    maxlength: OPT,
    size:      OPT,
    src:       OPT,
    checked:   BOOL,
    disabled:  BOOL,
    readonly:  BOOL

  element :textarea,
    rows:     REQ,
    cols:     REQ,
    name:     OPT,
    disabled: BOOL,
    readonly: BOOL

  element :button,
    name:     OPT,
    value:    OPT,
    type:     'submit',
    disabled: OPT
end

Класс выше используется путем создания на основе XMLGrammar нового класса.
Метод element предполагает использование в качестве своего первого аргумента
имени тега, а в качестве второго аргумента - хэша с допустимыми атрибутами.
Ключи хэша - имена атрибутов. REQ - обязательный атрибут, OPT - необязательный
атрибут.

Класс ниже (XMLGrammar) не содержит метода method_missing, поэтому он не
разрешит использовать тег, не являющийся частью грамматики. А метод tag,
предназначенный для вывода тегов, при проверке атрибутов выдаст ошибку.

class XMLGrammar
  # Создаем экземпляр этого класса, указав поток или объект для хранения
  # выходной информации. Объект должен отвечать на метод << (строка).
  def initialize(out)
    @out = out # Место отправки выходной информации
  end

  # Вызов блока для экземпляра, выводящего информацию в указанный поток.
  def self.generate(out, &block)
    new(out).instance_eval(&block)
  end

  # Определение разрешенного грамматикой элемента (или тега). Этот метод
  # класса является DSL, предназначенным для спецификации грамматики, и в нем
  # определяются методы, которые ложаться в основу DSL, предназначенного для
  # XML-вывода.
  def self.element(tagname, attributes = {})
    @allowed_attributes ||= {}
    @allowed_attributes[tagname] = attributes

    class_eval %Q{
      def #{tagname}(attributes = {}, &block)
        tag(:#{tagname}, attributes, &block)
      end
    }
  end

  # Эти костанты используются при определении значений атрибутов.
  OPT = :opt   # для не обязательных атрибутов
  REQ = :req   # для обязательных атрибутов
  BOOL = :bool # для атрибутов, значение которых заключается в их именах

  def self.allowed_attributes
    @allowed_attributes
  end

  # Вывод указанного объекта в виде комментария, возвращает nil.
  def comment(text)
    @out << "<!-- #{text} -->"; nil
  end

  # Вывод тега с указанным именем и атрибутами. Если есть блок, вызываем его.
  # Возвращает nil.
  def tag(tagname, attributes = {})
    @out << "<#{tagname}"

    # Получение разрешенных атрибутов для этого тега
    allowed = self.class.allowed_attributes[tagname]

    # Нужно убедиться, что каждый из атрибутов разрешен.
    attributes.each_pair do |key, value|
      raise "неизвестный атрибут: #{key}" unless allowed.include?(key)
      @out << " #{key}='#{value}'"
    end

    # Просмотр разрешенных атрибутов, выявление обязательных атрибутов, которые
    # опущены, и атрибутов со значениями по умолчанию, которые можно вывести.
    allowed.each_pair do |key, value|
      # Если атрибут уже был выведен, ничего не делать
      next if attributes.has_key?(key)

      if (value == REQ)
        raise "Обязательный атрибут #{key} пропущен в <#{tagname}>"
      elsif value.is_a?(String)
        @out << " #{key}='#{value}'"
      end
    end

    if block_given?
      @out << '>'     # Завершаем открытый тег
      content = yield # Вызов блока

      if content
        @out << content.to_s
      end

      @out << "</#{tagname}>" # Закрываем тег
    else
      @out << '/>'
    end

    nil
  end
end

Использование классов выше:

HTMLForm.generate(STDOUT) do
  comment 'Это простая HTML-форма'
  form name: 'Регистрация', action: 'http://www.example.com/register.cgi' do
    content 'Имя:'
    input name: 'имя'
    content 'Адрес:'
    textarea name: 'адрес', rows: 6, cols: 40 do
      'Введите почтовый адрес'
    end
    button { 'Submit' }
  end
end
-------------------------------------------------------------------------------