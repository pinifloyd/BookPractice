-------------------------------------------------------------------------------
Выражение представляет собой фрагмент Ruby-кода, который Ruby-интерпретатор
может вычислить, чтобы выдать какое-нибудь значение.
-------------------------------------------------------------------------------
Переменная - это всего лишь имя для значения. Если имя переменной появляется в
программе не в левой части присваивания, а где-нибудь в другом месте, то это
считается ссылкой на переменную, которая вычисляется в значение переменной.
-------------------------------------------------------------------------------
Неинициализированные переменные. Правила:

Переменные класса:
  Переменные класса перед своим использованием всегда должны иметь присвоенные
им значения. Если сослаться на переменную класса, которй не ыло присвоено
значение, Ruby выдаст ошибку имени - NameError.

Переменные экземпляра:
  Если сослаться на неинициализированную переменную экземпляра, Ruby вернет nil.

Глобальные переменные:
  Подобны тем же переменным экземпляра: они вычисляются в nil, но это приводит
к предупреждению, если Ruby запущен с ключом -w.

Локальные переменные:
  Если Ruby-интерпретатор уже присваивал значение локальной переменной, то он
знает, что это не метод, а переменная, и может вернуть значение переменной. Если
присваивания не было, то тогда Ruby рассматривает выражение как вызов метода.
Если метода с таким именем не существует, Ruby выдаст ошибку имени - NameError.
-------------------------------------------------------------------------------
Константы в Ruby похожи на переменные, за исключением того, что их значения, как
предполагается, остаются постоянными на всем протяжении работы программы. Ссылки
на константы являются выражениями, которые вычисляются в значения указанных
констант.

Константа не будет существовать до тех пор, пока ей не будет присвоенно значение.
-------------------------------------------------------------------------------
  Выражение вызова метода состоит из четырех частей.

1) Произвольного выражения, чьим значением является объект, в отношении которого
вызывается метод. Это выражение продолжается символом "." или символами "::" для
отделения его от имени метода, которое следует далее. Выражение и разделитель
необязательны; если они опущены, метод вызывается для текущего объекта - self.

2) Имени вызываемого метода. Эта единственная обязательная часть выражения вызова
метода.

3) Значений аргументов переданных методу.

4) Необязательного блока кода, ограниченного фигурными скобками или парой ключевых
слов do-end. Метод может вызвать этот код, используя ключевое слово yield.

Значением выражения вызова метода является значение последнего вычисленного
выражения в теле этого метода.
-------------------------------------------------------------------------------
При присваивании значений константам действует ряд особых правил:

1) Присваивание значений уже существующим константам заставляет Ruby выдавать
предупреждение. Тем не менее Ruby выполняет присваивание, что фактически означает
непостоянство констант.

2) Присваивание значений константам не разрешено внутри тела метода.

Невычисляемые выражения, похожие на следующее далее, не приводят к созданию
константы: N = 100 if false.

Константа будет иметь значение nil только в том случае, если именно оно и было ей
присвоено.
-------------------------------------------------------------------------------
Псевдооператоры, использующиеся в сокращенной записи присваивания:

+---------+------------+
| x += y  | x = x + y  |
+---------+------------+
| x -= y  | x = x - y  |
+---------+------------+
| x *= y  | x = x * y  |
+---------+------------+
| x /= y  | x = x / y  |
+---------+------------+
| x %= y  | x = x % y  |
+---------+------------+
| x **= y | x = x ** y |
+---------+------------+
| x &&= y | x = x && y |
+---------+------------+
| x ||= y | x = x || y |
+---------+------------+
| x &= y  | x = x & y  |
+---------+------------+
| x |= y  | x = x | y  |
+---------+------------+
| x ^= y  | x = x ^ y  |
+---------+------------+
| x <<= y | x = x << y |
+---------+------------+
| x >>= y | x = x >> y |
+---------+------------+

-------------------------------------------------------------------------------
Параллельное присваивание:

1) x, y, z = 1, 2, 3     #=> x = 1, y = 2, z = 3
2) x = 1, 2, 3           #=> x = [ 1, 2, 3 ]
3) x, = 1, 2, 3          #=> x = 1, (2, 3) -> отбрасываются
4) x, y, z = [ 1, 2, 3 ] #=> x = 1, y = 2, z = 3
5) x, y, z = 1, 2        #=> x = 1, y = 2, z = nil
6) x, y = 1, 2, 3        #=> x = 1, y = 2, 3 - отбрасывается
7) x, *y = 1, 2, 3       #=> x = 1, y = [ 2, 3 ]
8) *x, y = 1, 2, 3       #=> x = [ 1, 2 ], y = 3
-------------------------------------------------------------------------------
Одно из самых непонятных свойств параллельного присваивания является использование
в левой части скобок для "подприсваивания".

x, (y, z) = a, b

На самом деле это два присваивания, выполняемые одновременно:

x = a
y, z = b

x, y, z = 1, [ 2, 3 ]   #=> x = 1, y = [ 2, 3 ], z = nil
x, (y, z) = 1, [ 2, 3 ] #=> x = 1, y = 2, z = 3

a, b, c, d = [ 1, [ 2, [ 3, 4 ] ] ]     #=> a = 1, b = [ 2, [ 3, 4 ] ], c = d = nil
a, (b, (c, d)) = [ 1, [ 2, [ 3, 4 ] ] ] #=> a = 1, b = 2, c = 3, d = 4
-------------------------------------------------------------------------------
Оператор - это лексема языка Ruby, которая представляет операцию (как сложение
или сравнение), выполняемую над двумя или более операндами. Операнды являются
выражениями, и операторы позволяют объединить эти выражения-операнды в более
крупные выражения.

Число операндов (или арность) оператора определяет поле его деятельности.

Приоритетность операторов определяется тем, насколько "сильно" оператор привязан
к своим операндам, и влияет на порядок вычисления выражения.

Взаимосвязанность операторов определяет порядок вычислений, когда в выражении
последовательно появляется один и тот же оператор.
-------------------------------------------------------------------------------
